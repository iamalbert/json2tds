#line 2 "token.cpp"

#line 4 "token.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[3494] =
    {
 {   0,   0 }, {   0,3238 }, {   0,   0 }, {   0,3236 }, {   1, 516 },
 {   2, 516 }, {   3, 516 }, {   4, 516 }, {   5, 516 }, {   6, 516 },
 {   7, 516 }, {   8, 516 }, {   9, 518 }, {  10, 520 }, {  11, 516 },
 {  12, 516 }, {  13, 518 }, {  14, 516 }, {  15, 516 }, {  16, 516 },
 {  17, 516 }, {  18, 516 }, {  19, 516 }, {  20, 516 }, {  21, 516 },
 {  22, 516 }, {  23, 516 }, {  24, 516 }, {  25, 516 }, {  26, 516 },
 {  27, 516 }, {  28, 516 }, {  29, 516 }, {  30, 516 }, {  31, 516 },
 {  32, 518 }, {  33, 516 }, {  34, 522 }, {  35, 516 }, {  36, 516 },
 {  37, 516 }, {  38, 516 }, {  39, 516 }, {  40, 516 }, {  41, 516 },
 {  42, 516 }, {  43, 516 }, {  44, 524 }, {  45, 650 }, {  46, 516 },

 {  47, 516 }, {  48, 768 }, {  49, 770 }, {  50, 770 }, {  51, 770 },
 {  52, 770 }, {  53, 770 }, {  54, 770 }, {  55, 770 }, {  56, 770 },
 {  57, 770 }, {  58, 772 }, {  59, 516 }, {  60, 516 }, {  61, 516 },
 {  62, 516 }, {  63, 516 }, {  64, 516 }, {  65, 516 }, {  66, 516 },
 {  67, 516 }, {  68, 516 }, {  69, 516 }, {  70, 516 }, {  71, 516 },
 {  72, 516 }, {  73, 516 }, {  74, 516 }, {  75, 516 }, {  76, 516 },
 {  77, 516 }, {  78, 516 }, {  79, 516 }, {  80, 516 }, {  81, 516 },
 {  82, 516 }, {  83, 516 }, {  84, 516 }, {  85, 516 }, {  86, 516 },
 {  87, 516 }, {  88, 516 }, {  89, 516 }, {  90, 516 }, {  91, 774 },
 {  92, 516 }, {  93, 776 }, {  94, 516 }, {  95, 516 }, {  96, 516 },

 {  97, 516 }, {  98, 516 }, {  99, 516 }, { 100, 516 }, { 101, 516 },
 { 102, 778 }, { 103, 516 }, { 104, 516 }, { 105, 516 }, { 106, 516 },
 { 107, 516 }, { 108, 516 }, { 109, 516 }, { 110, 780 }, { 111, 516 },
 { 112, 516 }, { 113, 516 }, { 114, 516 }, { 115, 516 }, { 116, 782 },
 { 117, 516 }, { 118, 516 }, { 119, 516 }, { 120, 516 }, { 121, 516 },
 { 122, 516 }, { 123, 784 }, { 124, 516 }, { 125, 786 }, { 126, 516 },
 { 127, 516 }, { 128, 516 }, { 129, 516 }, { 130, 516 }, { 131, 516 },
 { 132, 516 }, { 133, 516 }, { 134, 516 }, { 135, 516 }, { 136, 516 },
 { 137, 516 }, { 138, 516 }, { 139, 516 }, { 140, 516 }, { 141, 516 },
 { 142, 516 }, { 143, 516 }, { 144, 516 }, { 145, 516 }, { 146, 516 },

 { 147, 516 }, { 148, 516 }, { 149, 516 }, { 150, 516 }, { 151, 516 },
 { 152, 516 }, { 153, 516 }, { 154, 516 }, { 155, 516 }, { 156, 516 },
 { 157, 516 }, { 158, 516 }, { 159, 516 }, { 160, 516 }, { 161, 516 },
 { 162, 516 }, { 163, 516 }, { 164, 516 }, { 165, 516 }, { 166, 516 },
 { 167, 516 }, { 168, 516 }, { 169, 516 }, { 170, 516 }, { 171, 516 },
 { 172, 516 }, { 173, 516 }, { 174, 516 }, { 175, 516 }, { 176, 516 },
 { 177, 516 }, { 178, 516 }, { 179, 516 }, { 180, 516 }, { 181, 516 },
 { 182, 516 }, { 183, 516 }, { 184, 516 }, { 185, 516 }, { 186, 516 },
 { 187, 516 }, { 188, 516 }, { 189, 516 }, { 190, 516 }, { 191, 516 },
 { 192, 516 }, { 193, 516 }, { 194, 516 }, { 195, 516 }, { 196, 516 },

 { 197, 516 }, { 198, 516 }, { 199, 516 }, { 200, 516 }, { 201, 516 },
 { 202, 516 }, { 203, 516 }, { 204, 516 }, { 205, 516 }, { 206, 516 },
 { 207, 516 }, { 208, 516 }, { 209, 516 }, { 210, 516 }, { 211, 516 },
 { 212, 516 }, { 213, 516 }, { 214, 516 }, { 215, 516 }, { 216, 516 },
 { 217, 516 }, { 218, 516 }, { 219, 516 }, { 220, 516 }, { 221, 516 },
 { 222, 516 }, { 223, 516 }, { 224, 516 }, { 225, 516 }, { 226, 516 },
 { 227, 516 }, { 228, 516 }, { 229, 516 }, { 230, 516 }, { 231, 516 },
 { 232, 516 }, { 233, 516 }, { 234, 516 }, { 235, 516 }, { 236, 516 },
 { 237, 516 }, { 238, 516 }, { 239, 516 }, { 240, 516 }, { 241, 516 },
 { 242, 516 }, { 243, 516 }, { 244, 516 }, { 245, 516 }, { 246, 516 },

 { 247, 516 }, { 248, 516 }, { 249, 516 }, { 250, 516 }, { 251, 516 },
 { 252, 516 }, { 253, 516 }, { 254, 516 }, { 255, 516 }, { 256, 516 },
 {   0,   0 }, {   0,2978 }, {   1, 258 }, {   2, 258 }, {   3, 258 },
 {   4, 258 }, {   5, 258 }, {   6, 258 }, {   7, 258 }, {   8, 258 },
 {   9, 260 }, {  10, 262 }, {  11, 258 }, {  12, 258 }, {  13, 260 },
 {  14, 258 }, {  15, 258 }, {  16, 258 }, {  17, 258 }, {  18, 258 },
 {  19, 258 }, {  20, 258 }, {  21, 258 }, {  22, 258 }, {  23, 258 },
 {  24, 258 }, {  25, 258 }, {  26, 258 }, {  27, 258 }, {  28, 258 },
 {  29, 258 }, {  30, 258 }, {  31, 258 }, {  32, 260 }, {  33, 258 },
 {  34, 264 }, {  35, 258 }, {  36, 258 }, {  37, 258 }, {  38, 258 },

 {  39, 258 }, {  40, 258 }, {  41, 258 }, {  42, 258 }, {  43, 258 },
 {  44, 266 }, {  45, 392 }, {  46, 258 }, {  47, 258 }, {  48, 510 },
 {  49, 512 }, {  50, 512 }, {  51, 512 }, {  52, 512 }, {  53, 512 },
 {  54, 512 }, {  55, 512 }, {  56, 512 }, {  57, 512 }, {  58, 514 },
 {  59, 258 }, {  60, 258 }, {  61, 258 }, {  62, 258 }, {  63, 258 },
 {  64, 258 }, {  65, 258 }, {  66, 258 }, {  67, 258 }, {  68, 258 },
 {  69, 258 }, {  70, 258 }, {  71, 258 }, {  72, 258 }, {  73, 258 },
 {  74, 258 }, {  75, 258 }, {  76, 258 }, {  77, 258 }, {  78, 258 },
 {  79, 258 }, {  80, 258 }, {  81, 258 }, {  82, 258 }, {  83, 258 },
 {  84, 258 }, {  85, 258 }, {  86, 258 }, {  87, 258 }, {  88, 258 },

 {  89, 258 }, {  90, 258 }, {  91, 516 }, {  92, 258 }, {  93, 518 },
 {  94, 258 }, {  95, 258 }, {  96, 258 }, {  97, 258 }, {  98, 258 },
 {  99, 258 }, { 100, 258 }, { 101, 258 }, { 102, 520 }, { 103, 258 },
 { 104, 258 }, { 105, 258 }, { 106, 258 }, { 107, 258 }, { 108, 258 },
 { 109, 258 }, { 110, 522 }, { 111, 258 }, { 112, 258 }, { 113, 258 },
 { 114, 258 }, { 115, 258 }, { 116, 524 }, { 117, 258 }, { 118, 258 },
 { 119, 258 }, { 120, 258 }, { 121, 258 }, { 122, 258 }, { 123, 526 },
 { 124, 258 }, { 125, 528 }, { 126, 258 }, { 127, 258 }, { 128, 258 },
 { 129, 258 }, { 130, 258 }, { 131, 258 }, { 132, 258 }, { 133, 258 },
 { 134, 258 }, { 135, 258 }, { 136, 258 }, { 137, 258 }, { 138, 258 },

 { 139, 258 }, { 140, 258 }, { 141, 258 }, { 142, 258 }, { 143, 258 },
 { 144, 258 }, { 145, 258 }, { 146, 258 }, { 147, 258 }, { 148, 258 },
 { 149, 258 }, { 150, 258 }, { 151, 258 }, { 152, 258 }, { 153, 258 },
 { 154, 258 }, { 155, 258 }, { 156, 258 }, { 157, 258 }, { 158, 258 },
 { 159, 258 }, { 160, 258 }, { 161, 258 }, { 162, 258 }, { 163, 258 },
 { 164, 258 }, { 165, 258 }, { 166, 258 }, { 167, 258 }, { 168, 258 },
 { 169, 258 }, { 170, 258 }, { 171, 258 }, { 172, 258 }, { 173, 258 },
 { 174, 258 }, { 175, 258 }, { 176, 258 }, { 177, 258 }, { 178, 258 },
 { 179, 258 }, { 180, 258 }, { 181, 258 }, { 182, 258 }, { 183, 258 },
 { 184, 258 }, { 185, 258 }, { 186, 258 }, { 187, 258 }, { 188, 258 },

 { 189, 258 }, { 190, 258 }, { 191, 258 }, { 192, 258 }, { 193, 258 },
 { 194, 258 }, { 195, 258 }, { 196, 258 }, { 197, 258 }, { 198, 258 },
 { 199, 258 }, { 200, 258 }, { 201, 258 }, { 202, 258 }, { 203, 258 },
 { 204, 258 }, { 205, 258 }, { 206, 258 }, { 207, 258 }, { 208, 258 },
 { 209, 258 }, { 210, 258 }, { 211, 258 }, { 212, 258 }, { 213, 258 },
 { 214, 258 }, { 215, 258 }, { 216, 258 }, { 217, 258 }, { 218, 258 },
 { 219, 258 }, { 220, 258 }, { 221, 258 }, { 222, 258 }, { 223, 258 },
 { 224, 258 }, { 225, 258 }, { 226, 258 }, { 227, 258 }, { 228, 258 },
 { 229, 258 }, { 230, 258 }, { 231, 258 }, { 232, 258 }, { 233, 258 },
 { 234, 258 }, { 235, 258 }, { 236, 258 }, { 237, 258 }, { 238, 258 },

 { 239, 258 }, { 240, 258 }, { 241, 258 }, { 242, 258 }, { 243, 258 },
 { 244, 258 }, { 245, 258 }, { 246, 258 }, { 247, 258 }, { 248, 258 },
 { 249, 258 }, { 250, 258 }, { 251, 258 }, { 252, 258 }, { 253, 258 },
 { 254, 258 }, { 255, 258 }, { 256, 258 }, {   0,  14 }, {   0,2720 },
 {   0,  13 }, {   0,2718 }, {   0,  13 }, {   0,2716 }, {   0,  14 },
 {   0,2714 }, {   0,  11 }, {   0,2712 }, {   0,   0 }, {   0,   0 },
 {   9, 278 }, {  10, 278 }, {   9, 276 }, {  10, 276 }, {  13, 278 },
 {   0,   0 }, {  13, 276 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 278 }, {   0,   0 },
 {  32, 276 }, {   0,   0 }, {  32, 344 }, {  33, 344 }, {  34, 276 },
 {  35, 344 }, {  36, 344 }, {  37, 344 }, {  38, 344 }, {  39, 344 },
 {  40, 344 }, {  41, 344 }, {  42, 344 }, {  43, 344 }, {  44, 344 },
 {  45, 344 }, {  46, 344 }, {  47, 344 }, {  48, 344 }, {  49, 344 },
 {  50, 344 }, {  51, 344 }, {  52, 344 }, {  53, 344 }, {  54, 344 },
 {  55, 344 }, {  56, 344 }, {  57, 344 }, {  58, 344 }, {  59, 344 },
 {  60, 344 }, {  61, 344 }, {  62, 344 }, {  63, 344 }, {  64, 344 },
 {  65, 344 }, {  66, 344 }, {  67, 344 }, {  68, 344 }, {  69, 344 },
 {  70, 344 }, {  71, 344 }, {  72, 344 }, {  73, 344 }, {  74, 344 },

 {  75, 344 }, {  76, 344 }, {  77, 344 }, {  78, 344 }, {  79, 344 },
 {  80, 344 }, {  81, 344 }, {  82, 344 }, {  83, 344 }, {  84, 344 },
 {  85, 344 }, {  86, 344 }, {  87, 344 }, {  88, 344 }, {  89, 344 },
 {  90, 344 }, {  91, 344 }, {  92, 497 }, {  93, 344 }, {  94, 344 },
 {  95, 344 }, {  96, 344 }, {  97, 344 }, {  98, 344 }, {  99, 344 },
 { 100, 344 }, { 101, 344 }, { 102, 344 }, { 103, 344 }, { 104, 344 },
 { 105, 344 }, { 106, 344 }, { 107, 344 }, { 108, 344 }, { 109, 344 },
 { 110, 344 }, { 111, 344 }, { 112, 344 }, { 113, 344 }, { 114, 344 },
 { 115, 344 }, { 116, 344 }, { 117, 344 }, { 118, 344 }, { 119, 344 },
 { 120, 344 }, { 121, 344 }, { 122, 344 }, { 123, 344 }, { 124, 344 },

 { 125, 344 }, { 126, 344 }, {   0,  14 }, {   0,2586 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  48, 678 }, {  49, 935 }, {  50, 935 }, {  51, 935 },
 {  52, 935 }, {  53, 935 }, {  54, 935 }, {  55, 935 }, {  56, 935 },
 {  57, 935 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 194, 499 },
 { 195, 499 }, { 196, 499 }, { 197, 499 }, { 198, 499 }, { 199, 499 },
 { 200, 499 }, { 201, 499 }, { 202, 499 }, { 203, 499 }, { 204, 499 },
 { 205, 499 }, { 206, 499 }, { 207, 499 }, { 208, 499 }, { 209, 499 },
 { 210, 499 }, { 211, 499 }, { 212, 499 }, { 213, 499 }, { 214, 499 },
 { 215, 499 }, { 216, 499 }, { 217, 499 }, { 218, 499 }, { 219, 499 },
 { 220, 499 }, { 221, 499 }, { 222, 499 }, { 223, 499 }, { 224, 533 },

 { 225, 597 }, { 226, 597 }, { 227, 597 }, { 228, 597 }, { 229, 597 },
 { 230, 597 }, { 231, 597 }, { 232, 597 }, { 233, 597 }, { 234, 597 },
 { 235, 597 }, { 236, 597 }, { 237, 692 }, { 238, 597 }, { 239, 597 },
 { 240, 790 }, { 241, 854 }, { 242, 854 }, { 243, 854 }, { 244, 918 },
 {   0,   3 }, {   0,2468 }, {   0,   3 }, {   0,2466 }, {   0,  12 },
 {   0,2464 }, {   0,   9 }, {   0,2462 }, {   0,  10 }, {   0,2460 },
 {   0,  14 }, {   0,2458 }, {   0,  14 }, {   0,2456 }, {   0,  14 },
 {   0,2454 }, {   0,   7 }, {   0,2452 }, {   0,   8 }, {   0,2450 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  13 }, {   0,2440 },

 {   0,   1 }, {   0,2438 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {   0,   0 }, {   0,   0 }, {  13,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46, 827 }, {   0,   0 }, {  46, 825 },
 {   0,   0 }, {  48, 852 }, {  49, 852 }, {  50, 852 }, {  51, 852 },
 {  52, 852 }, {  53, 852 }, {  54, 852 }, {  55, 852 }, {  56, 852 },
 {  57, 852 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  69, 842 }, {   0,   0 }, {  69, 840 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2370 },
 {   0,   0 }, {   0,   0 }, { 101, 842 }, {   0,   0 }, { 101, 840 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 552 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 114, 553 },

 { 117, 553 }, {  32,   0 }, {  33,   0 }, {  34, 471 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },

 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92, 153 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,2217 }, {   0,   0 }, {   0,2215 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  34,-153 }, {   0,   0 }, {   0,2181 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 194, 155 }, { 195, 155 },
 { 196, 155 }, { 197, 155 }, { 198, 155 }, { 199, 155 }, { 200, 155 },
 { 201, 155 }, { 202, 155 }, { 203, 155 }, { 204, 155 }, { 205, 155 },
 { 206, 155 }, { 207, 155 }, { 208, 155 }, { 209, 155 }, { 210, 155 },
 { 211, 155 }, { 212, 155 }, { 213, 155 }, { 214, 155 }, { 215, 155 },
 { 216, 155 }, { 217, 155 }, { 218, 155 }, { 219, 155 }, { 220, 155 },
 { 221, 155 }, { 222, 155 }, { 223, 155 }, { 224, 189 }, { 225, 253 },
 { 226, 253 }, { 227, 253 }, { 228, 253 }, { 229, 253 }, { 230, 253 },

 { 231, 253 }, { 232, 253 }, { 233, 253 }, { 234, 253 }, { 235, 253 },
 { 236, 253 }, { 237, 348 }, { 238, 253 }, { 239, 253 }, { 240, 446 },
 { 241, 510 }, { 242, 510 }, { 243, 510 }, { 244, 574 }, {  92,-153 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  98,-153 }, {   0,   0 }, {   0,2117 }, {   0,   0 }, { 102,-153 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 110,-153 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 114,-153 }, {   0,   0 }, { 116,-153 }, { 117, 662 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 128, 732 }, { 129, 732 }, { 130, 732 },
 { 131, 732 }, { 132, 732 }, { 133, 732 }, { 134, 732 }, { 135, 732 },
 { 136, 732 }, { 137, 732 }, { 138, 732 }, { 139, 732 }, { 140, 732 },
 { 141, 732 }, { 142, 732 }, { 143, 732 }, { 144, 732 }, { 145, 732 },
 { 146, 732 }, { 147, 732 }, { 148, 732 }, { 149, 732 }, { 150, 732 },
 { 151, 732 }, { 152, 732 }, { 153, 732 }, { 154, 732 }, { 155, 732 },
 { 156, 732 }, { 157, 732 }, { 158, 732 }, { 159, 732 }, { 160, 732 },
 { 161, 732 }, { 162, 732 }, { 163, 732 }, { 164, 732 }, { 165, 732 },
 { 166, 732 }, { 167, 732 }, { 168, 732 }, { 169, 732 }, { 170, 732 },
 { 171, 732 }, { 172, 732 }, { 173, 732 }, { 174, 732 }, { 175, 732 },

 { 176, 732 }, { 177, 732 }, { 178, 732 }, { 179, 732 }, { 180, 732 },
 { 181, 732 }, { 182, 732 }, { 183, 732 }, { 184, 732 }, { 185, 732 },
 { 186, 732 }, { 187, 732 }, { 188, 732 }, { 189, 732 }, { 190, 732 },
 { 191, 732 }, {   0,   0 }, {   0,2022 }, { 160, 700 }, { 161, 700 },
 { 162, 700 }, { 163, 700 }, { 164, 700 }, { 165, 700 }, { 166, 700 },
 { 167, 700 }, { 168, 700 }, { 169, 700 }, { 170, 700 }, { 171, 700 },
 { 172, 700 }, { 173, 700 }, { 174, 700 }, { 175, 700 }, { 176, 700 },
 { 177, 700 }, { 178, 700 }, { 179, 700 }, { 180, 700 }, { 181, 700 },
 { 182, 700 }, { 183, 700 }, { 184, 700 }, { 185, 700 }, { 186, 700 },
 { 187, 700 }, { 188, 700 }, { 189, 700 }, { 190, 700 }, { 191, 700 },

 { 128, 762 }, { 129, 762 }, { 130, 762 }, { 131, 762 }, { 132, 762 },
 { 133, 762 }, { 134, 762 }, { 135, 762 }, { 136, 762 }, { 137, 762 },
 { 138, 762 }, { 139, 762 }, { 140, 762 }, { 141, 762 }, { 142, 762 },
 { 143, 762 }, { 144, 762 }, { 145, 762 }, { 146, 762 }, { 147, 762 },
 { 148, 762 }, { 149, 762 }, { 150, 762 }, { 151, 762 }, { 152, 762 },
 { 153, 762 }, { 154, 762 }, { 155, 762 }, { 156, 762 }, { 157, 762 },
 { 158, 762 }, { 159, 762 }, { 160, 762 }, { 161, 762 }, { 162, 762 },
 { 163, 762 }, { 164, 762 }, { 165, 762 }, { 166, 762 }, { 167, 762 },
 { 168, 762 }, { 169, 762 }, { 170, 762 }, { 171, 762 }, { 172, 762 },
 { 173, 762 }, { 174, 762 }, { 175, 762 }, { 176, 762 }, { 177, 762 },

 { 178, 762 }, { 179, 762 }, { 180, 762 }, { 181, 762 }, { 182, 762 },
 { 183, 762 }, { 184, 762 }, { 185, 762 }, { 186, 762 }, { 187, 762 },
 { 188, 762 }, { 189, 762 }, { 190, 762 }, { 191, 762 }, {   0,   0 },
 {   0,1924 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   3 }, {   0,1908 }, {   0,   0 }, {   0,1906 }, {   0,   0 },
 {   0,   0 }, {   0,1903 }, {   0,   0 }, {   0,1901 }, {   0,   2 },
 {   0,1899 }, {   0,   0 }, {   0,1897 }, {   0,   0 }, {   0,1895 },
 { 128, 785 }, { 129, 785 }, { 130, 785 }, { 131, 785 }, { 132, 785 },

 { 133, 785 }, { 134, 785 }, { 135, 785 }, { 136, 785 }, { 137, 785 },
 { 138, 785 }, { 139, 785 }, { 140, 785 }, { 141, 785 }, { 142, 785 },
 { 143, 785 }, { 144, 785 }, { 145, 785 }, { 146, 785 }, { 147, 785 },
 { 148, 785 }, { 149, 785 }, { 150, 785 }, { 151, 785 }, { 152, 785 },
 { 153, 785 }, { 154, 785 }, { 155, 785 }, { 156, 785 }, { 157, 785 },
 { 158, 785 }, { 159, 785 }, {  46, 267 }, {   0,   0 }, {   0,1860 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  69, 282 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 101, 282 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 108,   9 }, {   0,   0 }, {   0,1796 }, { 108,   8 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, { 108, 250 }, {   0,   0 }, {   0,   0 },
 { 117, 252 }, {   0,   0 }, { 115, 250 }, {   0,   0 }, { 144, 762 },
 { 145, 762 }, { 146, 762 }, { 147, 762 }, { 148, 762 }, { 149, 762 },
 { 150, 762 }, { 151, 762 }, { 152, 762 }, { 153, 762 }, { 154, 762 },
 { 155, 762 }, { 156, 762 }, { 157, 762 }, { 158, 762 }, { 159, 762 },
 { 160, 762 }, { 161, 762 }, { 162, 762 }, { 163, 762 }, { 164, 762 },
 { 165, 762 }, { 166, 762 }, { 167, 762 }, { 168, 762 }, { 169, 762 },
 { 170, 762 }, { 171, 762 }, { 172, 762 }, { 173, 762 }, { 174, 762 },
 { 175, 762 }, { 176, 762 }, { 177, 762 }, { 178, 762 }, { 179, 762 },
 { 180, 762 }, { 181, 762 }, { 182, 762 }, { 183, 762 }, { 184, 762 },

 { 185, 762 }, { 186, 762 }, { 187, 762 }, { 188, 762 }, { 189, 762 },
 { 190, 762 }, { 191, 762 }, { 128, 816 }, { 129, 816 }, { 130, 816 },
 { 131, 816 }, { 132, 816 }, { 133, 816 }, { 134, 816 }, { 135, 816 },
 { 136, 816 }, { 137, 816 }, { 138, 816 }, { 139, 816 }, { 140, 816 },
 { 141, 816 }, { 142, 816 }, { 143, 816 }, { 144, 816 }, { 145, 816 },
 { 146, 816 }, { 147, 816 }, { 148, 816 }, { 149, 816 }, { 150, 816 },
 { 151, 816 }, { 152, 816 }, { 153, 816 }, { 154, 816 }, { 155, 816 },
 { 156, 816 }, { 157, 816 }, { 158, 816 }, { 159, 816 }, { 160, 816 },
 { 161, 816 }, { 162, 816 }, { 163, 816 }, { 164, 816 }, { 165, 816 },
 { 166, 816 }, { 167, 816 }, { 168, 816 }, { 169, 816 }, { 170, 816 },

 { 171, 816 }, { 172, 816 }, { 173, 816 }, { 174, 816 }, { 175, 816 },
 { 176, 816 }, { 177, 816 }, { 178, 816 }, { 179, 816 }, { 180, 816 },
 { 181, 816 }, { 182, 816 }, { 183, 816 }, { 184, 816 }, { 185, 816 },
 { 186, 816 }, { 187, 816 }, { 188, 816 }, { 189, 816 }, { 190, 816 },
 { 191, 816 }, { 128, 827 }, { 129, 827 }, { 130, 827 }, { 131, 827 },
 { 132, 827 }, { 133, 827 }, { 134, 827 }, { 135, 827 }, { 136, 827 },
 { 137, 827 }, { 138, 827 }, { 139, 827 }, { 140, 827 }, { 141, 827 },
 { 142, 827 }, { 143, 827 }, {   0,   3 }, {   0,1651 }, {   0,   0 },
 {   0,1649 }, {   0,   0 }, {   0,1647 }, {   0,   6 }, {   0,1645 },
 {   0,   4 }, {   0,1643 }, {   0,   0 }, {   0,1641 }, {   0,   5 },

 {   0,1639 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1626 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   3 },
 {   0,1614 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46,  10 },
 {   0,   0 }, {  48, 875 }, {  49, 875 }, {  50, 875 }, {  51, 875 },
 {  52, 875 }, {  53, 875 }, {  54, 875 }, {  55, 875 }, {  56, 875 },
 {  57, 875 }, {  48, 875 }, {  49, 875 }, {  50, 875 }, {  51, 875 },

 {  52, 875 }, {  53, 875 }, {  54, 875 }, {  55, 875 }, {  56, 875 },
 {  57, 875 }, {  43, 882 }, {  69,  25 }, {  45, 882 }, {   0,   0 },
 {   0,   0 }, {  48, 892 }, {  49, 892 }, {  50, 892 }, {  51, 892 },
 {  52, 892 }, {  53, 892 }, {  54, 892 }, {  55, 892 }, {  56, 892 },
 {  57, 892 }, {  46, -27 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,1555 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  25 },
 {   0,   0 }, { 101,   6 }, {   0,   0 }, { 101,   8 }, {  69, -12 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 101, -12 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 850 }, {  49, 850 }, {  50, 850 },
 {  51, 850 }, {  52, 850 }, {  53, 850 }, {  54, 850 }, {  55, 850 },
 {  56, 850 }, {  57, 850 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 850 },

 {  66, 850 }, {  67, 850 }, {  68, 850 }, {  69, 850 }, {  70, 850 },
 {   0,   0 }, {   0,1483 }, {   0,   0 }, {   0,1481 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97, 850 }, {  98, 850 }, {  99, 850 }, { 100, 850 },
 { 101, 850 }, { 102, 850 }, {   0,   0 }, {  32,-887 }, {  33,-887 },
 {  34,-416 }, {  35,-887 }, {  36,-887 }, {  37,-887 }, {  38,-887 },
 {  39,-887 }, {  40,-887 }, {  41,-887 }, {  42,-887 }, {  43,-887 },

 {  44,-887 }, {  45,-887 }, {  46,-887 }, {  47,-887 }, {  48,-887 },
 {  49,-887 }, {  50,-887 }, {  51,-887 }, {  52,-887 }, {  53,-887 },
 {  54,-887 }, {  55,-887 }, {  56,-887 }, {  57,-887 }, {  58,-887 },
 {  59,-887 }, {  60,-887 }, {  61,-887 }, {  62,-887 }, {  63,-887 },
 {  64,-887 }, {  65,-887 }, {  66,-887 }, {  67,-887 }, {  68,-887 },
 {  69,-887 }, {  70,-887 }, {  71,-887 }, {  72,-887 }, {  73,-887 },
 {  74,-887 }, {  75,-887 }, {  76,-887 }, {  77,-887 }, {  78,-887 },
 {  79,-887 }, {  80,-887 }, {  81,-887 }, {  82,-887 }, {  83,-887 },
 {  84,-887 }, {  85,-887 }, {  86,-887 }, {  87,-887 }, {  88,-887 },
 {  89,-887 }, {  90,-887 }, {  91,-887 }, {  92,-734 }, {  93,-887 },

 {  94,-887 }, {  95,-887 }, {  96,-887 }, {  97,-887 }, {  98,-887 },
 {  99,-887 }, { 100,-887 }, { 101,-887 }, { 102,-887 }, { 103,-887 },
 { 104,-887 }, { 105,-887 }, { 106,-887 }, { 107,-887 }, { 108,-887 },
 { 109,-887 }, { 110,-887 }, { 111,-887 }, { 112,-887 }, { 113,-887 },
 { 114,-887 }, { 115,-887 }, { 116,-887 }, { 117,-887 }, { 118,-887 },
 { 119,-887 }, { 120,-887 }, { 121,-887 }, { 122,-887 }, { 123,-887 },
 { 124,-887 }, { 125,-887 }, { 126,-887 }, {   0,   0 }, {   0,1355 },
 {   0,   0 }, { 128,  -2 }, { 129,  -2 }, { 130,  -2 }, { 131,  -2 },
 { 132,  -2 }, { 133,  -2 }, { 134,  -2 }, { 135,  -2 }, { 136,  -2 },
 { 137,  -2 }, { 138,  -2 }, { 139,  -2 }, { 140,  -2 }, { 141,  -2 },

 { 142,  -2 }, { 143,  -2 }, { 144,  -2 }, { 145,  -2 }, { 146,  -2 },
 { 147,  -2 }, { 148,  -2 }, { 149,  -2 }, { 150,  -2 }, { 151,  -2 },
 { 152,  -2 }, { 153,  -2 }, { 154,  -2 }, { 155,  -2 }, { 156,  -2 },
 { 157,  -2 }, { 158,  -2 }, { 159,  -2 }, { 160,  -2 }, { 161,  -2 },
 { 162,  -2 }, { 163,  -2 }, { 164,  -2 }, { 165,  -2 }, { 166,  -2 },
 { 167,  -2 }, { 168,  -2 }, { 169,  -2 }, { 170,  -2 }, { 171,  -2 },
 { 172,  -2 }, { 173,  -2 }, { 174,  -2 }, { 175,  -2 }, { 176,  -2 },
 { 177,  -2 }, { 178,  -2 }, { 179,  -2 }, { 180,  -2 }, { 181,  -2 },
 { 182,  -2 }, { 183,  -2 }, { 184,  -2 }, { 185,  -2 }, { 186,  -2 },
 { 187,  -2 }, { 188,  -2 }, { 189,  -2 }, { 190,  -2 }, { 191,  -2 },

 { 194,-732 }, { 195,-732 }, { 196,-732 }, { 197,-732 }, { 198,-732 },
 { 199,-732 }, { 200,-732 }, { 201,-732 }, { 202,-732 }, { 203,-732 },
 { 204,-732 }, { 205,-732 }, { 206,-732 }, { 207,-732 }, { 208,-732 },
 { 209,-732 }, { 210,-732 }, { 211,-732 }, { 212,-732 }, { 213,-732 },
 { 214,-732 }, { 215,-732 }, { 216,-732 }, { 217,-732 }, { 218,-732 },
 { 219,-732 }, { 220,-732 }, { 221,-732 }, { 222,-732 }, { 223,-732 },
 { 224,-698 }, { 225,-634 }, { 226,-634 }, { 227,-634 }, { 228,-634 },
 { 229,-634 }, { 230,-634 }, { 231,-634 }, { 232,-634 }, { 233,-634 },
 { 234,-634 }, { 235,-634 }, { 236,-634 }, { 237,-539 }, { 238,-634 },
 { 239,-634 }, { 240,-441 }, { 241,-377 }, { 242,-377 }, { 243,-377 },

 { 244,-313 }, {   0,   0 }, {   0,1237 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 128,-128 }, { 129,-128 }, { 130,-128 },
 { 131,-128 }, { 132,-128 }, { 133,-128 }, { 134,-128 }, { 135,-128 },
 { 136,-128 }, { 137,-128 }, { 138,-128 }, { 139,-128 }, { 140,-128 },
 { 141,-128 }, { 142,-128 }, { 143,-128 }, { 144,-128 }, { 145,-128 },
 { 146,-128 }, { 147,-128 }, { 148,-128 }, { 149,-128 }, { 150,-128 },
 { 151,-128 }, { 152,-128 }, { 153,-128 }, { 154,-128 }, { 155,-128 },
 { 156,-128 }, { 157,-128 }, { 158,-128 }, { 159,-128 }, { 160,-128 },
 { 161,-128 }, { 162,-128 }, { 163,-128 }, { 164,-128 }, { 165,-128 },

 { 166,-128 }, { 167,-128 }, { 168,-128 }, { 169,-128 }, { 170,-128 },
 { 171,-128 }, { 172,-128 }, { 173,-128 }, { 174,-128 }, { 175,-128 },
 { 176,-128 }, { 177,-128 }, { 178,-128 }, { 179,-128 }, { 180,-128 },
 { 181,-128 }, { 182,-128 }, { 183,-128 }, { 184,-128 }, { 185,-128 },
 { 186,-128 }, { 187,-128 }, { 188,-128 }, { 189,-128 }, { 190,-128 },
 { 191,-128 }, {   0,   0 }, {   0,1162 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 128,-246 }, { 129,-246 }, { 130,-246 }, { 131,-246 }, { 132,-246 },
 { 133,-246 }, { 134,-246 }, { 135,-246 }, { 136,-246 }, { 137,-246 },
 { 138,-246 }, { 139,-246 }, { 140,-246 }, { 141,-246 }, { 142,-246 },
 { 143,-246 }, { 144,-246 }, { 145,-246 }, { 146,-246 }, { 147,-246 },

 { 148,-246 }, { 149,-246 }, { 150,-246 }, { 151,-246 }, { 152,-246 },
 { 153,-246 }, { 154,-246 }, { 155,-246 }, { 156,-246 }, { 157,-246 },
 { 158,-246 }, { 159,-246 }, { 160,-246 }, { 161,-246 }, { 162,-246 },
 { 163,-246 }, { 164,-246 }, { 165,-246 }, { 166,-246 }, { 167,-246 },
 { 168,-246 }, { 169,-246 }, { 170,-246 }, { 171,-246 }, { 172,-246 },
 { 173,-246 }, { 174,-246 }, { 175,-246 }, { 176,-246 }, { 177,-246 },
 { 178,-246 }, { 179,-246 }, { 180,-246 }, { 181,-246 }, { 182,-246 },
 { 183,-246 }, { 184,-246 }, { 185,-246 }, { 186,-246 }, { 187,-246 },
 { 188,-246 }, { 189,-246 }, { 190,-246 }, { 191,-246 }, {   0,   0 },
 {   0,1044 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 128, 459 }, { 129, 459 }, { 130, 459 }, { 131, 459 }, { 132, 459 },
 { 133, 459 }, { 134, 459 }, { 135, 459 }, { 136, 459 }, { 137, 459 },
 { 138, 459 }, { 139, 459 }, { 140, 459 }, { 141, 459 }, { 142, 459 },
 { 143, 459 }, { 144, 459 }, { 145, 459 }, { 146, 459 }, { 147, 459 },
 { 148, 459 }, { 149, 459 }, { 150, 459 }, { 151, 459 }, { 152, 459 },
 { 153, 459 }, { 154, 459 }, { 155, 459 }, { 156, 459 }, { 157, 459 },
 { 158, 459 }, { 159, 459 }, { 160, 459 }, { 161, 459 }, { 162, 459 },
 { 163, 459 }, { 164, 459 }, { 165, 459 }, { 166, 459 }, { 167, 459 },
 { 168, 459 }, { 169, 459 }, { 170, 459 }, { 171, 459 }, { 172, 459 },

 { 173, 459 }, { 174, 459 }, { 175, 459 }, { 176, 459 }, { 177, 459 },
 { 178, 459 }, { 179, 459 }, { 180, 459 }, { 181, 459 }, { 182, 459 },
 { 183, 459 }, { 184, 459 }, { 185, 459 }, { 186, 459 }, { 187, 459 },
 { 188, 459 }, { 189, 459 }, { 190, 459 }, { 191, 459 }, {   0,   0 },
 {   0, 969 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128, 411 }, { 129, 411 },
 { 130, 411 }, { 131, 411 }, { 132, 411 }, { 133, 411 }, { 134, 411 },
 { 135, 411 }, { 136, 411 }, { 137, 411 }, { 138, 411 }, { 139, 411 },
 { 140, 411 }, { 141, 411 }, { 142, 411 }, { 143, 411 }, { 144, 411 },
 { 145, 411 }, { 146, 411 }, { 147, 411 }, { 148, 411 }, { 149, 411 },
 { 150, 411 }, { 151, 411 }, { 152, 411 }, { 153, 411 }, { 154, 411 },

 { 155, 411 }, { 156, 411 }, { 157, 411 }, { 158, 411 }, { 159, 411 },
 { 160, 411 }, { 161, 411 }, { 162, 411 }, { 163, 411 }, { 164, 411 },
 { 165, 411 }, { 166, 411 }, { 167, 411 }, { 168, 411 }, { 169, 411 },
 { 170, 411 }, { 171, 411 }, { 172, 411 }, { 173, 411 }, { 174, 411 },
 { 175, 411 }, { 176, 411 }, { 177, 411 }, { 178, 411 }, { 179, 411 },
 { 180, 411 }, { 181, 411 }, { 182, 411 }, { 183, 411 }, { 184, 411 },
 { 185, 411 }, { 186, 411 }, { 187, 411 }, { 188, 411 }, { 189, 411 },
 { 190, 411 }, { 191, 411 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128, 459 }, { 129, 459 },

 { 130, 459 }, { 131, 459 }, { 132, 459 }, { 133, 459 }, { 134, 459 },
 { 135, 459 }, { 136, 459 }, { 137, 459 }, { 138, 459 }, { 139, 459 },
 { 140, 459 }, { 141, 459 }, { 142, 459 }, { 143, 459 }, { 144, 459 },
 { 145, 459 }, { 146, 459 }, { 147, 459 }, { 148, 459 }, { 149, 459 },
 { 150, 459 }, { 151, 459 }, { 152, 459 }, { 153, 459 }, { 154, 459 },
 { 155, 459 }, { 156, 459 }, { 157, 459 }, { 158, 459 }, { 159, 459 },
 { 160, 459 }, { 161, 459 }, { 162, 459 }, { 163, 459 }, { 164, 459 },
 { 165, 459 }, { 166, 459 }, { 167, 459 }, { 168, 459 }, { 169, 459 },
 { 170, 459 }, { 171, 459 }, { 172, 459 }, { 173, 459 }, { 174, 459 },
 { 175, 459 }, { 176, 459 }, { 177, 459 }, { 178, 459 }, { 179, 459 },

 { 180, 459 }, { 181, 459 }, { 182, 459 }, { 183, 459 }, { 184, 459 },
 { 185, 459 }, { 186, 459 }, { 187, 459 }, { 188, 459 }, { 189, 459 },
 { 190, 459 }, { 191, 459 }, {   0,   3 }, {   0, 776 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   3 }, {   0, 766 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 744 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   3 },
 {   0, 734 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46,-865 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {  69,-850 }, {   0,   0 }, {   0, 705 },
 {   0,   0 }, {   0, 703 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  69, 326 }, {  48,  10 }, {  49,  10 },
 {  50,  10 }, {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 },

 {  55,  10 }, {  56,  10 }, {  57,  10 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, { 101,-850 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101, 326 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 388 }, {  49, 388 }, {  50, 388 },
 {  51, 388 }, {  52, 388 }, {  53, 388 }, {  54, 388 }, {  55, 388 },
 {  56, 388 }, {  57, 388 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 388 },

 {  66, 388 }, {  67, 388 }, {  68, 388 }, {  69, 388 }, {  70, 388 },
 {   0,   0 }, {   0, 633 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97, 388 }, {  98, 388 }, {  99, 388 }, { 100, 388 },
 { 101, 388 }, { 102, 388 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128,-780 },
 { 129,-780 }, { 130,-780 }, { 131,-780 }, { 132,-780 }, { 133,-780 },
 { 134,-780 }, { 135,-780 }, { 136,-780 }, { 137,-780 }, { 138,-780 },
 { 139,-780 }, { 140,-780 }, { 141,-780 }, { 142,-780 }, { 143,-780 },
 { 144,-780 }, { 145,-780 }, { 146,-780 }, { 147,-780 }, { 148,-780 },
 { 149,-780 }, { 150,-780 }, { 151,-780 }, { 152,-780 }, { 153,-780 },
 { 154,-780 }, { 155,-780 }, { 156,-780 }, { 157,-780 }, { 158,-780 },
 { 159,-780 }, { 160,-780 }, { 161,-780 }, { 162,-780 }, { 163,-780 },

 { 164,-780 }, { 165,-780 }, { 166,-780 }, { 167,-780 }, { 168,-780 },
 { 169,-780 }, { 170,-780 }, { 171,-780 }, { 172,-780 }, { 173,-780 },
 { 174,-780 }, { 175,-780 }, { 176,-780 }, { 177,-780 }, { 178,-780 },
 { 179,-780 }, { 180,-780 }, { 181,-780 }, { 182,-780 }, { 183,-780 },
 { 184,-780 }, { 185,-780 }, { 186,-780 }, { 187,-780 }, { 188,-780 },
 { 189,-780 }, { 190,-780 }, { 191,-780 }, {   0,   0 }, {   0, 510 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, { 128,-850 },
 { 129,-850 }, { 130,-850 }, { 131,-850 }, { 132,-850 }, { 133,-850 },
 { 134,-850 }, { 135,-850 }, { 136,-850 }, { 137,-850 }, { 138,-850 },
 { 139,-850 }, { 140,-850 }, { 141,-850 }, { 142,-850 }, { 143,-850 },

 { 144,-850 }, { 145,-850 }, { 146,-850 }, { 147,-850 }, { 148,-850 },
 { 149,-850 }, { 150,-850 }, { 151,-850 }, { 152,-850 }, { 153,-850 },
 { 154,-850 }, { 155,-850 }, { 156,-850 }, { 157,-850 }, { 158,-850 },
 { 159,-850 }, { 160,-850 }, { 161,-850 }, { 162,-850 }, { 163,-850 },
 { 164,-850 }, { 165,-850 }, { 166,-850 }, { 167,-850 }, { 168,-850 },
 { 169,-850 }, { 170,-850 }, { 171,-850 }, { 172,-850 }, { 173,-850 },
 { 174,-850 }, { 175,-850 }, { 176,-850 }, { 177,-850 }, { 178,-850 },
 { 179,-850 }, { 180,-850 }, { 181,-850 }, { 182,-850 }, { 183,-850 },
 { 184,-850 }, { 185,-850 }, { 186,-850 }, { 187,-850 }, { 188,-850 },
 { 189,-850 }, { 190,-850 }, { 191,-850 }, {   0,   0 }, {   0, 440 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  43, 146 }, {   0,   0 }, {  45, 146 },
 {   0,   0 }, {   0,   0 }, {  48, 156 }, {  49, 156 }, {  50, 156 },

 {  51, 156 }, {  52, 156 }, {  53, 156 }, {  54, 156 }, {  55, 156 },
 {  56, 156 }, {  57, 156 }, { 128,-973 }, { 129,-973 }, { 130,-973 },
 { 131,-973 }, { 132,-973 }, { 133,-973 }, { 134,-973 }, { 135,-973 },
 { 136,-973 }, { 137,-973 }, { 138,-973 }, { 139,-973 }, { 140,-973 },
 { 141,-973 }, { 142,-973 }, { 143,-973 }, { 144,-973 }, { 145,-973 },
 { 146,-973 }, { 147,-973 }, { 148,-973 }, { 149,-973 }, { 150,-973 },
 { 151,-973 }, { 152,-973 }, { 153,-973 }, { 154,-973 }, { 155,-973 },
 { 156,-973 }, { 157,-973 }, { 158,-973 }, { 159,-973 }, { 160,-973 },
 { 161,-973 }, { 162,-973 }, { 163,-973 }, { 164,-973 }, { 165,-973 },
 { 166,-973 }, { 167,-973 }, { 168,-973 }, { 169,-973 }, { 170,-973 },

 { 171,-973 }, { 172,-973 }, { 173,-973 }, { 174,-973 }, { 175,-973 },
 { 176,-973 }, { 177,-973 }, { 178,-973 }, { 179,-973 }, { 180,-973 },
 { 181,-973 }, { 182,-973 }, { 183,-973 }, { 184,-973 }, { 185,-973 },
 { 186,-973 }, { 187,-973 }, { 188,-973 }, { 189,-973 }, { 190,-973 },
 { 191,-973 }, {   0,   0 }, {   0, 317 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0, 294 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   3 },
 {   0, 284 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,  59 }, {  49,  59 }, {  50,  59 }, {  51,  59 }, {  52,  59 },
 {  53,  59 }, {  54,  59 }, {  55,  59 }, {  56,  59 }, {  57,  59 },
 {   0,   0 }, {   0, 258 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,  59 }, {  66,  59 }, {  67,  59 },
 {  68,  59 }, {  69,  59 }, {  70,  59 }, {  48,  10 }, {  49,  10 },
 {  50,  10 }, {  51,  10 }, {  52,  10 }, {  53,  10 }, {  54,  10 },

 {  55,  10 }, {  56,  10 }, {  57,  10 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,  59 },
 {  98,  59 }, {  99,  59 }, { 100,  59 }, { 101,  59 }, { 102,  59 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-2112 },
 {  49,-2112 }, {  50,-2112 }, {  51,-2112 }, {  52,-2112 }, {  53,-2112 },
 {  54,-2112 }, {  55,-2112 }, {  56,-2112 }, {  57,-2112 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2112 }, {  66,-2112 }, {  67,-2112 }, {  68,-2112 },

 {  69,-2112 }, {  70,-2112 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-2112 }, {  98,-2112 },
 {  99,-2112 }, { 100,-2112 }, { 101,-2112 }, { 102,-2112 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 257,  16 }, {   1,   0 },
    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[16] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "token.l"
#line 2 "token.l"

#include <cstdlib>
 

#include "JsonNode.h"
#include "parser.hpp"

//#define DEBUG
#ifdef DEBUG
    #define TOKEN(t) do{ printf("tok " #t "\t: %s\n",yytext); return(t);}while(0)
#else
    #define TOKEN(t) return (t);
#endif

#define YY_DECL int yylex \
        (YYSTYPE * yylval_param, yyscan_t yyscanner, JsonState * state)
//(yylval.token = t)

char * codepoint_to_char(unsigned long c, char *b ){
    if (c<0x80) *b++=c;
    else if (c<0x800) *b++=192+c/64, *b++=128+c%64;
    else if (c-0xd800u<0x800) return 0;
    else if (c<0x10000) *b++=224+c/4096, *b++=128+c/64%64, *b++=128+c%64;
    else if (c<0x110000) *b++=240+c/262144, *b++=128+c/4096%64, *b++=128+c/64%64, *b++=128+c%64;
    else {
        return 0;
    }
    return b;
}

unsigned long int hex2int(char * b ){
    return strtoul( b, NULL, 16 );
}

char * escape_str(char * first, size_t len){
    char * last = first + len;
    char * org_first = first;
    char * pos = first;

    char str[5] = {0};

    while( first != last && *first != '\0' ){
        //printf("%c\n", *first);
        if ( *first == '\\' ){
            int flag = 0;
            unsigned long codepoint = 0;
            switch( *(first+1) ){
                case 't': *pos = '\t'; break;
                case 'b': *pos = '\b'; break;
                case 'n': *pos = '\n'; break;
                case 'r': *pos = '\r'; break;
                case 'f': *pos = '\f'; break;
                case '"': *pos = '"'; break;
                case '\\': *pos = '\\'; break;
                case 'u':
                    memcpy(str, first+2, 4);
                    codepoint = hex2int(str);
                    pos = codepoint_to_char(codepoint, pos);

                    flag = 2;
                    break;
                default:
                    *pos = *first;
                    flag  = 1;
            }
            if (flag == 1) {
                pos += 1;
                first += 1;
            }else if(flag == 2){
                /* pos is moved in codepoint_to_char() */
                first += 6;
            }else {
                pos += 1;
                first += 2;
            }
        }else{
            *pos = *first;

            pos += 1;
            first += 1;
        }
    }
    *pos = '\0';
    return org_first;
}

#line 1209 "token.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	{
#line 123 "token.l"


#line 1467 "token.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 126 "token.l"
case 2:
YY_RULE_SETUP
#line 126 "token.l"
{ 
    /*
    size_t len = escape_str(yytext+1, yyleng-2);

    char * newbuf = (char*) malloc(len+1);
    strcpy( newbuf , yytext+1);

    puts(newbuf);
    printf("%p\n", state->getString(newbuf) );
    */
    
	yylval->strval = state->getString(escape_str(yytext+1, yyleng-2));

    TOKEN(T_STRING);
};
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 142 "token.l"
{ 
	yylval->numval = atof(yytext);
	TOKEN(T_NUMBER); 
};
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 147 "token.l"
{ TOKEN(T_TRUE); };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 148 "token.l"
{ TOKEN(T_FALSE); };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 149 "token.l"
{ TOKEN(T_NULL); };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 151 "token.l"
{ TOKEN(T_LEFT_CUR); };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 152 "token.l"
{ TOKEN(T_RIGHT_CUR); };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 154 "token.l"
{ TOKEN(T_LEFT_BRAK); };
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 155 "token.l"
{ TOKEN(T_RIGHT_BRAK); };
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 157 "token.l"
{ TOKEN(T_COMMA); };
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 158 "token.l"
{ TOKEN(T_COLON); };
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 160 "token.l"
/* ignore whitespace */;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 162 "token.l"
{ TOKEN(T_UNIDENTIFY); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 164 "token.l"
ECHO;
	YY_BREAK
#line 1621 "token.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 163 "token.l"



